<?php
namespace App\Http\Controllers;

use DB;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Validator;
use Carbon\Carbon;

class ApiController extends Controller
{
    public function establishment_registration(Request $request){
        //($request->all());
        $insert["username"] = $request->username;
        $insert["password"] = Hash::make($request->password);
        $insert["date_created"] = Carbon::now('Asia/Manila');
        $insert["status"] = 1;
        
        $insert_est["establishment_name"] = $request->est_name;
        $insert_est["location_latitude"] = $request->lat;
        $insert_est["location_longitude"] = $request->lon;
        $insert_est["good_for_emotion_of"] = $request->emotion;
        $insert_est["good_at_of"] = $request->age;
        $insert_est["status"] = 1;
        $insert_est["date_created"] = Carbon::now();
        
        $pass = $request->pass;
        if($pass == "est_registration"){
            $check = DB::table("tbl_estabalishment_user")->where("username",$insert["username"])->count();
            if($check == 0){
                $insert_est["establishment_user_id"] = DB::table("tbl_estabalishment_user")->insertGetId($insert);
               if($insert_est["establishment_user_id"] > 0){
                    DB::table("tbl_establishment")->insert($insert_est);
                    $response["status"] = "success";
               }else{
                   $response["status"] = "fail";
               }
            }else{
                $response["status"] = "fail";
            }
        }else{
            $response["status"] = "fail";
        }
        return json_encode($response);
    }
    
    public function user_registration(Request $request){
        $insert["first_name"] = $request->first_name;
        $insert["last_name"] = $request->last_name;
        $insert["username"] = $request->username;
        $insert["password"] = Hash::make($request->password);
        $insert["date_created"] = Carbon::now('Asia/Manila');
        $insert["status"] = 1;
        $pass = $request->pass;
        
        $check = DB::table("tbl_user")->where("username",$request->username)->count();
        if($check == 0){
            if($pass == "user_registration"){
                DB::table("tbl_user")->insert($insert);
                $response["status"] = "success";
            }else{
                $response["status"] = "fail";
            }
        }else{
            $response["status"] = "existing";
        }
        return json_encode($response);
    }
    
    public function login(Request $request){
        if($request->pass == "for_login"){
            if($request->for_log == "mobile_app"){
                $check = DB::table("tbl_user")->where("username",$request->username)->count();
                if($check == 1){
                    $checkPassword = DB::table("tbl_user")->where("username",$request->username)->first();
                    if(Hash::check($request->password,$checkPassword->password)){
                        $response["status"] = "sucess";
                        $response["data"] = DB::table("tbl_user")->where("username",$request->username)->get();
                    }else{
                        $response["status"]="Wrong password";
                        $response["data"] = "";
                    }
                }
                else{
                    $response["status"] = "fail";
                    $response["data"] = "";
                }
            }else if($request->for_log == "desktop_app"){
                $check = DB::table("tbl_estabalishment_user")->where("username",$request->username)->count();
                if($check == 1){
                    $checkPassword = DB::table("tbl_estabalishment_user")->where("username",$request->username)->first();
                   if(Hash::check($request->password,$checkPassword->password)){
                        $response["status"] = "sucess";
                        $response["data"] = DB::table("tbl_establishment")->join('tbl_estabalishment_user','tbl_establishment.establishment_user_id','=','tbl_estabalishment_user.id')->where("username",$request->username)->first();
                   }else{
                       $response["status"] = "fail";
                        $response["data"] = "";
                   }
                }
                else{
                    $response["status"] = "fail";
                    $response["data"] = "";
                }
            }
        }else{
            $response["status"] = "fail";
            $response["data"] = "";
        }
        return json_encode($response);
    }
    
    public function add_category(Request $request){
        $insert["category_name"] = $request->cat_name;
        $insert["status"] = 1;
        $insert["date_created"] = Carbon::now("Asia/Manila");
        $insert["added_by"] = $request->added_by;
        if($request->pass == "est_category"){
            $check = DB::table("tbl_menu_category")->where("category_name",$request->cat_name)->count();
            if($check == 0){
                $id = DB::table("tbl_menu_category")->insertGetId($insert);
                if($id > 0){
                    $response["status"] = "success";
                }else{
                    $response["status"] = "fail";
                }
            }else{
                $response["status"] = "existing";
            }
        }else{
            $response["status"] = "fail";
        }
        return json_encode($response);
    }
    
    public function getAllCategory(Request $request){
        $id = $request->id;
        if($request->pass == "est_get_category"){
            $response["status"] = "success";
            $response["data"] = DB::table("tbl_menu_category")->select("category_name")->where("added_by",$id)->where("status",1)->get();
        }else{
            $response["status"] = "fails";
            $response["data"] = "";
        }
        return json_encode($response);
    }
    
    public function add_product(Request $request){
        $check_existing = DB::table("tbl_menu_item")->where("item_name",$request->product_name)->where("establishment_id",$request->est_id)->count();
        if($check_existing == 0)
        {
            $imageOne = $request->file('imageOne');
            $filename = 'productone' . '-' . time() . '.' . $imageOne->getClientOriginalExtension();
            $location = public_path('images/');
            $request->file('imageOne')->move($location, $filename);
      
            $insert["path"]    = $location . $filename;
            $insert["item_name"] = $request->product_name;
            $insert["price"] = $request->product_price;
            $insert["establishment_id"] = $request->est_id;
            $insert["status"] = 1;
            $insert["date_created"] = Carbon::now();
            $product_cat = $request->product_cat;
        if($request->pass == "add_product"){
          $cat_id = DB::table("tbl_menu_category")->where("category_name",$product_cat)->first();
          if($cat_id->id > 0){
             $insert["category_id"] = (int)$cat_id->id;
             $id = DB::table("tbl_menu_item")->insertGetId($insert);
            if($id > 0){
                $response["status"] = "success";
            }else{
                $response["status"] = "fail";
            }
            }else{
                $response["status"] = "fail";
            }
            }else{
                $response["status"] = "fail";
            }
        }else{
            $response["status"] = "existing";
        }   
       return json_encode($response);
    }
}